Per risolvere il problema descritto, potremmo usare una struttura dati di tipo grafo.
Un grafo è una struttura dati composta da nodi (che in questo caso rappresenterebbero le parole del dizionario) e archi (che rappresenterebbero le relazioni tra le parole).
Inoltre, potremmo definire dei pesi per gli archi in modo da rappresentare il costo delle varie regole per passare da una parola all'altra.

La prima cosa da fare è quindi costruire il grafo inserendo tutte le parole del dizionario come nodi.
Successivamente, potremmo generare tutti gli archi tra le parole in base alle regole definite.
Ad esempio, per la prima regola R1 (aggiungo/tolgo una lettera), potremmo generare un arco tra due parole se una delle due può essere ottenuta dall'altra aggiungendo o togliendo una lettera.
Potremmo poi assegnare un peso all'arco in base alla posizione della lettera aggiunta o tolta (ad esempio, costa meno aggiungere/togliere una lettera all'inizio o alla fine di una parola che non in mezzo).

Una volta costruito il grafo, l'utente può scegliere due parole a caso, che possono essere già presenti nel dizionario o nuove.
In quest'ultimo caso, il sistema dovrebbe verificare se le parole sono già presenti nel dizionario, in modo da poterle utilizzare per trovare i cammini alfabeticamente vicini.

Per trovare i cammini che collegano le due parole, potremmo usare un algoritmo di ricerca come l'algoritmo di Dijkstra o A* per trovare il cammino minimo tra due nodi del grafo.
In questo caso, il peso degli archi rappresenterebbe il costo delle regole per passare da una parola all'altra, quindi l'algoritmo cercherebbe il cammino con il costo totale minimo.

Infine, il sistema può calcolare la distanza tra le due parole come il numero di regole applicate lungo il cammino trovato.
Ad esempio, se il cammino è composto da due archi di tipo R1 e uno di tipo R2, la distanza tra le parole sarebbe 3.

Spero di aver risposto in modo esaustivo alla tua domanda.
In caso tu abbia altri dubbi o domande, non esitare a chiedere.